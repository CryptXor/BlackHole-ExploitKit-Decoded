<?php 

class Logs
{
    public static $WidgetTitles = array(  );

    public static function generateParams($startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = array(  );
        if( $startDate != null ) 
        {
            $where[] = "(DateTime >= " . intval($startDate) . ")";
        }

        if( $endDate != null ) 
        {
            $where[] = "(DateTime <= " . intval($endDate) . ")";
        }

        if( $threadID != null ) 
        {
            $where[] = "(ThreadID = " . intval($threadID) . ")";
            $where[] = "(Deleted = 0)";
        }

        if( $ruleID != null ) 
        {
            $where[] = "(RuleID = " . intval($ruleID) . ")";
        }

        return $where;
    }

    public static function getGlobalStatistics($threadID = null, $ruleID = null)
    {
        $where = self::generateparams(null, null, $threadID, $ruleID);
        $sql = "SELECT\n\t\t\t\t\t\tSUM(1) as hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " (l3.Redirect=0)) as hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " (IPStatus = 1)) as executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l";
        if( count($where) != 0 ) 
        {
            $sql .= " WHERE " . implode(" and ", $where);
        }

        $sql .= " LIMIT 0, 1";
        $res = db::select($sql);
        if( $res[0]["hited"] == "" ) 
        {
            $res[0]["hited"] = 0;
        }

        return $res[0];
    }

    public static function getGlobalStatisticsToday($threadID = null, $ruleID = null)
    {
        $start = mktime(0, 0, 0, date("m"), date("d"), date("Y"));
        $end = $start + 3600 * 24;
        return self::getglobalstatisticsperiod($threadID, $ruleID, $start, $end);
    }

    public static function getGlobalStatisticsPeriod($threadID = null, $ruleID = null, $start = null, $end = null)
    {
        $where = self::generateparams($start, $end, $threadID, $ruleID);
        $sql = "SELECT\n\t\t\t\t\t\tSUM(1) as hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " (l3.Redirect=0)) as hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " (IPStatus = 1)) as executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\tWHERE ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where);
        }

        $sql .= " \n\t\t\t\t\tLIMIT 0, 1";
        $res = db::select($sql);
        $r = $res[0];
        if( $r["hited"] == null ) 
        {
            $r["hited"] = 0;
        }

        return $r;
    }

    public static function getStatisticsByBrowser($startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        $sql = "SELECT\n\t\t\t\t\t\tBrowserID as ID,\n\t\t\t\t\t\tSUM(1) as Hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as Hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " l3.BrowserID = l.BrowserID and (l3.Redirect=0)) as Hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( count($where) != 0 ) 
        {
            $sql .= implode(" and ", $where) . " and";
        }

        $sql .= " l2.BrowserID = l.BrowserID and (IPStatus = 1)) as Executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\t";
        if( count($where) != 0 ) 
        {
            $sql .= "WHERE " . implode(" and ", $where);
        }

        $sql .= " GROUP BY\n\t\t\t\t\t\tBrowserID\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\tHosts DESC,\n\t\t\t\t\t\tHited DESC,\n\t\t\t\t\t\tExecuted DESC\n\t\t\t\t\t";
        $res = db::select($sql);
        foreach( $res as &$entry ) 
        {
            $entry["Title"] = Browser::$browsers[$entry["ID"]];
        }
        return $res;
    }

    public static function getFullStatisticsByBrowser($browserID = null, $startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        if( $browserID != null ) 
        {
            $where[] = "BrowserID = " . intval($browserID);
        }

        $sql = "SELECT\n\t\t\t\t\t\tBrowserVersion,\n\t\t\t\t\t\tSUM(1) as hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " l3.BrowserVersion = l.BrowserVersion and (l3.Redirect=0)) as hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( count($where) != 0 ) 
        {
            $sql .= implode(" and ", $where) . " and";
        }

        $sql .= " l2.BrowserVersion = l.BrowserVersion and (IPStatus = 1)) as executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\t";
        if( count($where) != 0 ) 
        {
            $sql .= "WHERE " . implode(" and ", $where);
        }

        $sql .= " GROUP BY\n\t\t\t\t\t\tBrowserVersion\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\thosts DESC,\n\t\t\t\t\t\thited DESC,\n\t\t\t\t\t\texecuted DESC\n\t\t\t\t\t";
        return db::select($sql);
    }

    public static function getStatisticsByOS($startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        $sql = "SELECT\n\t\t\t\t\t\tOSID as ID,\n\t\t\t\t\t\tSUM(1) as Hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as Hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " l3.OSID = l.OSID and (l3.Redirect=0)) as Hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( count($where) != 0 ) 
        {
            $sql .= implode(" and ", $where) . " and";
        }

        $sql .= " l2.OSID = l.OSID and (IPStatus = 1)) as Executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\t";
        if( count($where) != 0 ) 
        {
            $sql .= "WHERE " . implode(" and ", $where);
        }

        $sql .= " GROUP BY\n\t\t\t\t\t\tOSID\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\tHosts DESC,\n\t\t\t\t\t\tHited DESC,\n\t\t\t\t\t\tExecuted DESC\n\t\t\t\t\t";
        $res = db::select($sql);
        $keys = array_keys(Browser::$OSList);
        foreach( $res as &$entry ) 
        {
            $entry["Title"] = $keys[$entry["ID"]];
        }
        return $res;
    }

    public static function getStatisticsByCountry($startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        $sql = "SELECT\n\t\t\t\t\t\tCountryID as ID,\n\t\t\t\t\t\tSUM(1) as Hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as Hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " l3.CountryID = l.CountryID and (l3.Redirect=0)) as Hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( count($where) != 0 ) 
        {
            $sql .= implode(" and ", $where) . " and";
        }

        $sql .= " l2.CountryID = l.CountryID and (IPStatus = 1)) as Executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\t";
        if( count($where) != 0 ) 
        {
            $sql .= "WHERE " . implode(" and ", $where);
        }

        $sql .= " GROUP BY\n\t\t\t\t\t\tCountryID\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\tHosts DESC,\n\t\t\t\t\t\tHited DESC,\n\t\t\t\t\t\tExecuted DESC\n\t\t\t\t\t";
        $res = db::select($sql);
        foreach( $res as &$entry ) 
        {
            $entry["Title"] = Browser::$countryNames[$entry["ID"]];
        }
        return $res;
    }

    public static function getStatisticsByExploit($startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        $where[] = "((IPStatus = 1) or (IPStatus = 2))";
        $sql = "SELECT\n\t\t\t\t\t\tExploitID as ID,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( count($where) != 0 ) 
        {
            $sql .= implode(" and ", $where) . " and";
        }

        $sql .= " (l2.ExploitID = l.ExploitID)) as Executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\t";
        if( count($where) != 0 ) 
        {
            $sql .= "WHERE " . implode(" and ", $where);
        }

        $sql .= " GROUP BY\n\t\t\t\t\t\tExploitID\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\tExecuted DESC\n\t\t\t\t\t";
        $res = array(  );
        for( $i = 0; $i < count(Browser::$exploits); $i++ ) 
        {
            $sql = "select count(DISTINCT IP) as Executed from Logs where ";
            if( count($where) != 0 ) 
            {
                $sql .= implode(" and ", $where) . " and";
            }

            $sql .= " (ExploitID = " . $i . ")";
            $res2 = db::select($sql);
            $r = $res2[0];
            $res[] = array( "ID" => $i, "Executed" => $r["Executed"] );
        }
        $summ = 0;
        foreach( $res as &$entry ) 
        {
            $entry["Title"] = Browser::$exploits[$entry["ID"]];
            $summ += $entry["Executed"];
        }
        $resArr = array(  );
        foreach( $res as &$entry ) 
        {
            $entry["Hosts2"] = $summ;
            $entry["Hosts"] = $entry["Executed"];
            $entry["Hited"] = $summ;
            if( $entry["Executed"] != 0 ) 
            {
                $resArr[] = $entry;
            }

        }
        return $resArr;
    }

    public static function getFullStatisticsByExploit($exploitID = null, $startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        if( $exploitID != null ) 
        {
            $where[] = "ExploitID = " . intval($exploitID);
        }

        $sql = "SELECT\n\t\t\t\t\t\tOSID as ID,\n\t\t\t\t\t\tSUM(1) as hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " l3.OSID = l.OSID and (l3.Redirect=0)) as hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( count($where) != 0 ) 
        {
            $sql .= implode(" and ", $where) . " and";
        }

        $sql .= " l2.OSID = l.OSID and (IPStatus = 1)) as executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\t";
        if( count($where) != 0 ) 
        {
            $sql .= "WHERE " . implode(" and ", $where);
        }

        $sql .= " GROUP BY\n\t\t\t\t\t\tOSID\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\tHosts DESC,\n\t\t\t\t\t\tHited DESC,\n\t\t\t\t\t\tExecuted DESC\n\t\t\t\t\t";
        $res = db::select($sql);
        $keys = array_keys(Browser::$OSList);
        foreach( $res as &$entry ) 
        {
            $entry["BrowserVersion"] = $keys[$entry["ID"]];
        }
        $summ = 0;
        foreach( $res as &$entry ) 
        {
            $summ += $entry["executed"];
        }
        $resArr = array(  );
        foreach( $res as &$entry ) 
        {
            $entry["hosts2"] = $summ;
            $entry["hosts"] = $entry["executed"];
            $entry["hited"] = $summ;
            if( $entry["executed"] != 0 ) 
            {
                $resArr[] = $entry;
            }

        }
        return $resArr;
    }

    public static function getStatisticsByWidgets($startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        $widgets = db::select("select * from Widgets");
        $totalRes = array(  );
        $ids2load = array( "browsers" => array(  ), "oses" => array(  ), "countries" => array(  ), "exploits" => array(  ), "threads" => array(  ) );
        foreach( $widgets as $widget ) 
        {
            foreach( array( "browsers", "oses", "countries", "threads" ) as $type ) 
            {
                if( $widget[$type] == "" ) 
                {
                    continue;
                }

                $arr = explode(",", $widget[$type]);
                $arr = _obfuscated_0D253C220A0E192B05262B190C3C5C2F31021D270D2422_($arr, "");
                $ids2load[$type] = array_merge($ids2load[$type], $arr);
            }
        }
        $reses = array(  );
        foreach( array( "browsers", "oses", "countries", "threads" ) as $type ) 
        {
            if( count($ids2load[$type]) == 0 ) 
            {
                continue;
            }

            $fieldTitle = "";
            switch( $type ) 
            {
                case "browsers":
                    $fieldTitle = "Browser";
                    break;
                case "oses":
                    $fieldTitle = "OS";
                    break;
                case "countries":
                    $fieldTitle = "Country";
                    break;
                case "threads":
                    $fieldTitle = "Thread";
            }
            $tmpWhere = $where;
            $tmpWhere[] = $fieldTitle . "ID in (" . implode(",", $ids2load[$type]) . ")";
            $sql = "SELECT\n\t\t\t\t\t\t\t" . $fieldTitle . "ID as ID,\n\t\t\t\t\t\t\tSUM(1) as Hited,\n\t\t\t\t\t\t\tcount(DISTINCT IP) as Hosts,\n\t\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
            if( 0 < count($where) ) 
            {
                $sql .= implode(" and ", $where) . " and ";
            }

            $sql .= " l3." . $fieldTitle . "ID = l." . $fieldTitle . "ID and (l3.Redirect=0)) as Hosts2,\n\t\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
            if( count($tmpWhere) != 0 ) 
            {
                $sql .= implode(" and ", $tmpWhere) . " and";
            }

            $sql .= " l2." . $fieldTitle . "ID = l." . $fieldTitle . "ID and (IPStatus = 1)) as Executed\n\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\tLogs as l\n\t\t\t\t\t\t";
            if( count($tmpWhere) != 0 ) 
            {
                $sql .= "WHERE " . implode(" and ", $tmpWhere);
            }

            $sql .= " GROUP BY\n\t\t\t\t\t\t\t" . $fieldTitle . "ID\n\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\tHosts DESC,\n\t\t\t\t\t\t\tHited DESC,\n\t\t\t\t\t\t\tExecuted DESC\n\t\t\t\t\t\t";
            $res = db::select($sql);
            $reses[$type] = $res;
        }
        foreach( $widgets as $widget ) 
        {
            $middleRes = array(  );
            foreach( array( "browsers", "oses", "countries", "threads" ) as $type ) 
            {
                if( $widget[$type] == "" ) 
                {
                    continue;
                }

                $fieldTitle = "";
                switch( $type ) 
                {
                    case "browsers":
                        $fieldTitle = "Browser";
                        break;
                    case "oses":
                        $fieldTitle = "OS";
                        break;
                    case "countries":
                        $fieldTitle = "Country";
                        break;
                    case "threads":
                        $fieldTitle = "Thread";
                }
                $fieldTitle .= "ID";
                $ids = explode(",", $widget[$type]);
                $res = array(  );
                if( !isset($reses[$type]) ) 
                {
                    continue;
                }

                foreach( $reses[$type] as &$entry ) 
                {
                    $pos = array_search($entry["ID"], $ids);
                    if( $pos !== false ) 
                    {
                        array_splice($ids, $pos, 1);
                        $res[] =& $entry;
                        $entry["Type"] = $type;
                        switch( $type ) 
                        {
                            case "browsers":
                                $entry["Title"] = Browser::$browsers[$entry["ID"]];
                                break;
                            case "oses":
                                $keys = array_keys(Browser::$OSList);
                                $entry["Title"] = $keys[$entry["ID"]];
                                break;
                            case "countries":
                                $entry["Title"] = Browser::$countryNames[$entry["ID"]];
                                break;
                            case "threads":
                                foreach( ThreadsData::$data as $thread ) 
                                {
                                    if( $thread["ID"] == $entry["ID"] ) 
                                    {
                                        $entry["Title"] = $thread["Title"];
                                        break;
                                    }

                                }
                        }
                        if( !isset($entry["Title"]) || $entry["Title"] == "" ) 
                        {
                            $entry["Title"] = "untitled";
                        }

                    }
                    else
                    {
                        continue;
                    }

                }
                if( 0 < count($ids) ) 
                {
                    foreach( $ids as $id ) 
                    {
                        if( $id == "" ) 
                        {
                            continue;
                        }

                        $entry2 = array( "Hosts" => 0, "Hosts2" => 0, "Hited" => 0, "Executed" => 0, "ID" => $id );
                        switch( $type ) 
                        {
                            case "browsers":
                                $entry2["Title"] = Browser::$browsers[$entry2["ID"]];
                                break;
                            case "oses":
                                $keys = array_keys(Browser::$OSList);
                                $entry2["Title"] = $keys[$entry2["ID"]];
                                break;
                            case "countries":
                                $entry2["Title"] = Browser::$countryNames[$entry2["ID"]];
                                break;
                            case "threads":
                                foreach( ThreadsData::$data as $thread ) 
                                {
                                    if( $thread["ID"] == $entry2["ID"] ) 
                                    {
                                        $entry2["Title"] = $thread["Title"];
                                        break;
                                    }

                                }
                        }
                        if( !isset($entry2["Title"]) || $entry2["Title"] == "" ) 
                        {
                            $entry2["Title"] = "untitled";
                        }

                        $entry2["Type"] = $type;
                        $res[] = $entry2;
                    }
                }

                if( 0 < count($res) ) 
                {
                    $middleRes = array_merge($middleRes, $res);
                }

            }
            $totalRes[$widget["ID"]] = $middleRes;
            self::$WidgetTitles[$widget["ID"]] = ($widget["Title"] == "" ? "Widget " . $widget["ID"] : $widget["Title"]);
        }
        return $totalRes;
    }

    public static function getStatisticsByWidget($widgetId, $startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        $widgets = db::select("select * from Widgets where ID = " . intval($widgetId));
        $widget = $widgets[0];
        $totalRes = array(  );
        $ids2load = array( "browsers" => array(  ), "oses" => array(  ), "countries" => array(  ), "exploits" => array(  ), "threads" => array(  ) );
        foreach( $widgets as $widget ) 
        {
            foreach( array( "browsers", "oses", "countries", "threads" ) as $type ) 
            {
                if( $widget[$type] == "" ) 
                {
                    continue;
                }

                $arr = explode(",", $widget[$type]);
                $arr = _obfuscated_0D253C220A0E192B05262B190C3C5C2F31021D270D2422_($arr, "");
                $ids2load[$type] = array_merge($ids2load[$type], $arr);
            }
        }
        $reses = array(  );
        foreach( array( "browsers", "oses", "countries", "threads" ) as $type ) 
        {
            if( count($ids2load[$type]) == 0 ) 
            {
                continue;
            }

            $fieldTitle = "";
            switch( $type ) 
            {
                case "browsers":
                    $fieldTitle = "Browser";
                    break;
                case "oses":
                    $fieldTitle = "OS";
                    break;
                case "countries":
                    $fieldTitle = "Country";
                    break;
                case "threads":
                    $fieldTitle = "Thread";
            }
            $tmpWhere = $where;
            $tmpWhere[] = $fieldTitle . "ID in (" . implode(",", $ids2load[$type]) . ")";
            $sql = "SELECT\n\t\t\t\t\t\t\t" . $fieldTitle . "ID as ID,\n\t\t\t\t\t\t\tSUM(1) as Hited,\n\t\t\t\t\t\t\tcount(DISTINCT IP) as Hosts,\n\t\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
            if( 0 < count($where) ) 
            {
                $sql .= implode(" and ", $where) . " and ";
            }

            $sql .= " l3." . $fieldTitle . "ID = l." . $fieldTitle . "ID and (l3.Redirect=0)) as Hosts2,\n\t\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
            if( count($tmpWhere) != 0 ) 
            {
                $sql .= implode(" and ", $tmpWhere) . " and";
            }

            $sql .= " l2." . $fieldTitle . "ID = l." . $fieldTitle . "ID and (IPStatus = 1)) as Executed\n\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\tLogs as l\n\t\t\t\t\t\t";
            if( count($tmpWhere) != 0 ) 
            {
                $sql .= "WHERE " . implode(" and ", $tmpWhere);
            }

            $sql .= " GROUP BY\n\t\t\t\t\t\t\t" . $fieldTitle . "ID\n\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\tHosts DESC,\n\t\t\t\t\t\t\tHited DESC,\n\t\t\t\t\t\t\tExecuted DESC\n\t\t\t\t\t\t";
            $res = db::select($sql);
            $reses[$type] = $res;
        }
        foreach( $widgets as $widget ) 
        {
            $middleRes = array(  );
            foreach( array( "browsers", "oses", "countries", "threads" ) as $type ) 
            {
                if( $widget[$type] == "" ) 
                {
                    continue;
                }

                $fieldTitle = "";
                switch( $type ) 
                {
                    case "browsers":
                        $fieldTitle = "Browser";
                        break;
                    case "oses":
                        $fieldTitle = "OS";
                        break;
                    case "countries":
                        $fieldTitle = "Country";
                        break;
                    case "threads":
                        $fieldTitle = "Thread";
                }
                $fieldTitle .= "ID";
                $ids = explode(",", $widget[$type]);
                $res = array(  );
                if( !isset($reses[$type]) ) 
                {
                    continue;
                }

                foreach( $reses[$type] as &$entry ) 
                {
                    $pos = array_search($entry["ID"], $ids);
                    if( $pos !== false ) 
                    {
                        array_splice($ids, $pos, 1);
                        $res[] =& $entry;
                        $entry["Type"] = $type;
                        switch( $type ) 
                        {
                            case "browsers":
                                $entry["Title"] = Browser::$browsers[$entry["ID"]];
                                break;
                            case "oses":
                                $keys = array_keys(Browser::$OSList);
                                $entry["Title"] = $keys[$entry["ID"]];
                                break;
                            case "countries":
                                $entry["Title"] = Browser::$countryNames[$entry["ID"]];
                                break;
                            case "threads":
                                foreach( ThreadsData::$data as $thread ) 
                                {
                                    if( $thread["ID"] == $entry["ID"] ) 
                                    {
                                        $entry["Title"] = $thread["Title"];
                                        break;
                                    }

                                }
                        }
                        if( !isset($entry["Title"]) || $entry["Title"] == "" ) 
                        {
                            $entry["Title"] = "untitled";
                        }

                    }
                    else
                    {
                        continue;
                    }

                }
                if( 0 < count($ids) ) 
                {
                    foreach( $ids as $id ) 
                    {
                        if( $id == "" ) 
                        {
                            continue;
                        }

                        $entry2 = array( "Hosts" => 0, "Hosts2" => 0, "Hited" => 0, "Executed" => 0, "ID" => $id );
                        switch( $type ) 
                        {
                            case "browsers":
                                $entry2["Title"] = Browser::$browsers[$entry2["ID"]];
                                break;
                            case "oses":
                                $keys = array_keys(Browser::$OSList);
                                $entry2["Title"] = $keys[$entry2["ID"]];
                                break;
                            case "countries":
                                $entry2["Title"] = Browser::$countryNames[$entry2["ID"]];
                                break;
                            case "threads":
                                foreach( ThreadsData::$data as $thread ) 
                                {
                                    if( $thread["ID"] == $entry2["ID"] ) 
                                    {
                                        $entry2["Title"] = $thread["Title"];
                                        break;
                                    }

                                }
                        }
                        if( !isset($entry2["Title"]) || $entry2["Title"] == "" ) 
                        {
                            $entry2["Title"] = "untitled";
                        }

                        $entry2["Type"] = $type;
                        $res[] = $entry2;
                    }
                }

                if( 0 < count($res) ) 
                {
                    $middleRes = array_merge($middleRes, $res);
                }

            }
            $totalRes[$widget["ID"]] = $middleRes;
            self::$WidgetTitles[$widget["ID"]] = ($widget["Title"] == "" ? "Widget " . $widget["ID"] : iconv("windows-1251", "utf-8", $widget["Title"]));
        }
        return $totalRes;
    }

    public static function getStatisticsByReferers($startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        $sql = "SELECT\n\t\t\t\t\t\tRefererID as ID,\n\t\t\t\t\t\tr.Domain as Title,\n\t\t\t\t\t\tSUM(1) as Hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as Hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " l3.RefererID = l.RefererID and (l3.Redirect=0)) as Hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( count($where) != 0 ) 
        {
            $sql .= implode(" and ", $where) . " and";
        }

        $sql .= " l2.RefererID = l.RefererID and (IPStatus = 1)) as Executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\t";
        $sql .= " LEFT JOIN\n\t\t\t\t\t\tReferers as r ON r.ID = l.RefererID ";
        if( count($where) != 0 ) 
        {
            $sql .= "WHERE " . implode(" and ", $where);
        }

        $sql .= " GROUP BY\n\t\t\t\t\t\tRefererID\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\tHosts DESC,\n\t\t\t\t\t\tHited DESC,\n\t\t\t\t\t\tExecuted DESC\n\t\t\t\t\t";
        $res = db::select($sql);
        $fRes = array(  );
        foreach( $res as &$entry ) 
        {
            if( $entry["Title"] == "" ) 
            {
                $entry["Title"] = "no referer";
            }

            if( !isset($fRes[$entry["Title"]]) ) 
            {
                $fRes[$entry["Title"]] = $entry;
            }
            else
            {
                $e =& $fRes[$entry["Title"]];
                $e["Hited"] += $entry["Hited"];
                $e["Hosts"] += $entry["Hosts"];
                $e["Hosts2"] += $entry["Hosts2"];
                $e["Executed"] += $entry["Executed"];
            }

        }
        return array_values($fRes);
    }

    public static function getFullStatisticsByReferer($refererDomain = null, $startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        $tmpWhere = $where;
        $where = array(  );
        if( $refererDomain != null ) 
        {
            $where[] = "r.Domain = '" . _obfuscated_0D1A27275C5B1A0C391939052F053C0A372B11341B2B22_($refererDomain) . "'";
            $sql = "select ID, Path from Referers as r where " . implode(" and ", $where) . " order by path asc";
            $res = db::select($sql);
            $ids = array(  );
            foreach( $res as $row ) 
            {
                if( !isset($ids[$row["Path"]]) ) 
                {
                    $ids[$row["Path"]] = array(  );
                }

                $ids[$row["Path"]][] = $row["ID"];
            }
            $totalRes = array(  );
            foreach( $ids as $path => $arr ) 
            {
                $where2 = $tmpWhere;
                $where2[] = "l.RefererID in (" . implode(",", $arr) . ")";
                $sql = "SELECT\n\t\t\t\t\t\t\tRefererID,\n\t\t\t\t\t\t\tSUM(1) as hited,\n\t\t\t\t\t\t\tcount(DISTINCT IP) as hosts,\n\t\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l where ";
                if( 0 < count($where2) ) 
                {
                    $sql .= implode(" and ", $where2) . " and ";
                }

                $sql .= " (l.Redirect=0)) as hosts2,\n\t\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l where ";
                if( count($where2) != 0 ) 
                {
                    $sql .= implode(" and ", $where2) . " and";
                }

                $sql .= " (IPStatus = 1)) as executed\n\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\tLogs as l\n\t\t\t\t\t\t";
                if( count($where2) != 0 ) 
                {
                    $sql .= "WHERE " . implode(" and ", $where2);
                }

                $sql .= " \n\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\thosts DESC,\n\t\t\t\t\t\t\thited DESC,\n\t\t\t\t\t\t\texecuted DESC\n\t\t\t\t\t\t";
                $r = db::select($sql);
                $t = $r[0];
                $t["BrowserVersion"] = $path;
                $totalRes[] = $t;
            }
            return $totalRes;
        }
        else
        {
            return array(  );
        }

    }

    public static function getStatisticsByThread($startDate = null, $endDate = null, $threadID = null, $ruleID = null)
    {
        $where = self::generateparams($startDate, $endDate, $threadID, $ruleID);
        $sql = "SELECT\n\t\t\t\t\t\tThreadID as ID,\n\t\t\t\t\t\tSUM(1) as Hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as Hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " l3.ThreadID = l.ThreadID and (l3.Redirect=0)) as Hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( count($where) != 0 ) 
        {
            $sql .= implode(" and ", $where) . " and";
        }

        $sql .= " l2.ThreadID = l.ThreadID and (IPStatus = 1)) as Executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\t";
        if( count($where) != 0 ) 
        {
            $sql .= "WHERE " . implode(" and ", $where);
        }

        $sql .= " GROUP BY\n\t\t\t\t\t\tThreadID\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\tHosts DESC,\n\t\t\t\t\t\tHited DESC,\n\t\t\t\t\t\tExecuted DESC\n\t\t\t\t\t";
        $res = db::select($sql);
        $titles = db::select("select ID, Title from Threads");
        foreach( $res as &$entry ) 
        {
            foreach( $titles as $arr ) 
            {
                if( $arr["ID"] == $entry["ID"] ) 
                {
                    $entry["Title"] = $arr["Title"];
                    break;
                }

            }
        }
        return $res;
    }

    public static function getFullStatisticsByThread($threadID = null, $startDate = null, $endDate = null, $_threadID = null)
    {
        $where = self::generateparams($startDate, $endDate, $_threadID);
        if( $threadID != null ) 
        {
            $where[] = "ThreadID = " . intval($threadID);
        }

        $sql = "SELECT\n\t\t\t\t\t\tRuleID,\n\t\t\t\t\t\tSUM(1) as hited,\n\t\t\t\t\t\tcount(DISTINCT IP) as hosts,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l3 where ";
        if( 0 < count($where) ) 
        {
            $sql .= implode(" and ", $where) . " and ";
        }

        $sql .= " l3.RuleID = l.RuleID and (l3.Redirect=0)) as hosts2,\n\t\t\t\t\t\t(select count(DISTINCT IP) from Logs as l2 where ";
        if( count($where) != 0 ) 
        {
            $sql .= implode(" and ", $where) . " and";
        }

        $sql .= " l2.RuleID = l.RuleID and (IPStatus = 1)) as executed\n\t\t\t\t\tFROM\n\t\t\t\t\t\tLogs as l\n\t\t\t\t\t";
        if( count($where) != 0 ) 
        {
            $sql .= "WHERE " . implode(" and ", $where);
        }

        $sql .= " \n\t\t\t\t\tGROUP BY\n\t\t\t\t\t\tRuleID\n\t\t\t\t\tORDER BY\n\t\t\t\t\t\thosts DESC,\n\t\t\t\t\t\thited DESC,\n\t\t\t\t\t\texecuted DESC\n\t\t\t\t\t";
        $res = db::select($sql);
        foreach( $res as &$r ) 
        {
            $r["BrowserVersion"] = "Rule #" . ($r["RuleID"] + 1);
            foreach( ThreadsData::$data as $thread ) 
            {
                foreach( $thread["Rules"] as $r2 ) 
                {
                    if( $r2["ID"] == $r["RuleID"] ) 
                    {
                        $r["BrowserVersion"] = (isset($r2["Title"]) && $r2["Title"] != "" ? $r2["Title"] : "Rule #" . ($r2["ID"] + 1));
                    }

                }
            }
        }
        return $res;
    }

}


